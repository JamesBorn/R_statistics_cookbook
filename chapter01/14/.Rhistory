library(cluster)
clusterward1 <- agnes(dist.om1, diss = TRUE, method = "ward")
plot(clusterward1, which.plot = 2)
cl1.4 <- cutree(clusterward1, k = 4)
cl1.4fac <- factor(cl1.4, labels = paste("Type", 1:4))
seqrplot(mvad.seq, diss = dist.om1, group = cl1.4fac,border = NA)
seqHtplot(mvad.seq,group=group__, title = "Entropy index")
library(R6)
customers = read.csv("/Users/admin/Documents/R_book/Customers_data_missing_products.csv")
Customer = R6Class(public=list(Customer_id = NULL,Name = NULL,City = NULL,
initialize = function(customer_id,name,city,Missing_product,Missing_since){
self$Customer_id  <- customer_id
self$Name         <- name
self$City         <- city
},
is_city_in_america = function(){
return (upper_(self$City) %in% c("NEW YORK","LONDON","MIAMI","BARCELONA"))
},
full_print = function(){
print("------------------------------------")
print(paste("Customer name ->",super$Name))
print(paste("Customer city ->",super$City))
print(paste("Missing prod  ->",self$Missing_prod))
print(paste("Missing since ->",self$Missing_since))
print("------------------------------------")
}
),private=list(
upper_ = function(x){
return (toupper(x))
}
))
list_of_customers = list()
for (row in 1:nrow(customers)){
row_read = customers[row,]
customer = Customer$new(row_read$Customer_id,row_read$Name,row_read$City)
list_of_customers[[row]] <- (customer)
}
list_of_customers[[1]]$full_print()
library(R6)
customers = read.csv("/Users/admin/Documents/R_book/Customers_data_missing_products.csv")
Customer = R6Class(public=list(Customer_id = NULL,Name = NULL,City = NULL,
initialize = function(customer_id,name,city,Missing_product,Missing_since){
self$Customer_id  <- customer_id
self$Name         <- name
self$City         <- city
},
is_city_in_america = function(){
return (upper_(self$City) %in% c("NEW YORK","LONDON","MIAMI","BARCELONA"))
},
full_print = function(){
print("------------------------------------")
print(paste("Customer name ->",self$Name))
print(paste("Customer city ->",self$City))
print("------------------------------------")
}
),private=list(
upper_ = function(x){
return (toupper(x))
}
))
list_of_customers = list()
for (row in 1:nrow(customers)){
row_read = customers[row,]
customer = Customer$new(row_read$Customer_id,row_read$Name,row_read$City)
list_of_customers[[row]] <- (customer)
}
list_of_customers[[1]]$full_print()
library(R6)
customers = read.csv("/Users/admin/Documents/R_book/Customers_data_missing_products.csv")
Customer_missprod = R6Class(inherit = Customer,
public=list(Missing_prod = NULL,Missing_since = NULL,
initialize = function(customer_id,name,city,Missing_product,Missing_since){
super$Customer_id  <- customer_id
super$Name         <- name
super$City         <- city
self$Missing_prod  <- Missing_product
self$Missing_since <- Missing_since
},
full_print = function(){
print("------------------------------------")
print(paste("Customer name ->",super$Name))
print(paste("Customer city ->",super$City))
print(paste("Missing prod  ->",self$Missing_prod))
print(paste("Missing since ->",self$Missing_since))
print("------------------------------------")
}
)
)
customers = read.csv("/Users/admin/Documents/R_book/Customers_data_missing_products.csv")
Customer_missprod = R6Class(inherit = Customer,
public=list(Missing_prod = NULL,Missing_since = NULL,
initialize = function(customer_id,name,city,Missing_product,Missing_since){
super$Customer_id  <- customer_id
super$Name         <- name
super$City         <- city
self$Missing_prod  <- Missing_product
self$Missing_since <- Missing_since
},
full_print = function(){
print("------------------------------------")
print(paste("Customer name ->",super$Name))
print(paste("Customer city ->",super$City))
print(paste("Missing prod  ->",self$Missing_prod))
print(paste("Missing since ->",self$Missing_since))
print("------------------------------------")
}
)
)
list_of_customers = list()
for (row in 1:nrow(customers)){
row_read = customers[row,]
customer = Customer_missprod$new(row_read$Customer_id,row_read$Name,row_read$City,row_read$Missing_product,row_read$Missing_since)
list_of_customers[[row]] <- (customer)
}
list_of_customers[[1]]$full_print()
customers = read.csv("/Users/admin/Documents/R_book/Customers_data_missing_products.csv")
Customer_missprod = R6Class(inherit = Customer,
public=list(Missing_prod = NULL,Missing_since = NULL,
initialize = function(customer_id,name,city,Missing_product,Missing_since){
super$Customer_id  <- customer_id
super$Name         <- name
super$City         <- city
self$Missing_prod  <- Missing_product
self$Missing_since <- Missing_since
},
full_print = function(){
print("------------------------------------")
print(paste("Customer name ->",super$Name))
print(paste("Customer city ->",super$City))
print(paste("Missing prod  ->",self$Missing_prod))
print(paste("Missing since ->",self$Missing_since))
print("------------------------------------")
}
)
)
list_of_customers = list()
for (row in 1:nrow(customers)){
row_read = customers[row,]
customer = Customer_missprod$new(row_read$Customer_id,row_read$Name,row_read$City,row_read$Missing_product,row_read$Missing_since)
list_of_customers[[row]] <- (customer)
}
list_of_customers[[1]]$full_print()
library(R6)
customers = read.csv("/Users/admin/Documents/R_book/Customers_data_missing_products.csv")
Customer = R6Class(public=list(Customer_id = NULL,Name = NULL,City = NULL,
initialize = function(customer_id,name,city,Missing_product,Missing_since){
self$Customer_id  <- customer_id
self$Name         <- name
self$City         <- city
},
is_city_in_america = function(){
return (upper_(self$City) %in% c("NEW YORK","LONDON","MIAMI","BARCELONA"))
},
full_print = function(){
print("------------------------------------")
print(paste("Customer name ->",self$Name))
print(paste("Customer city ->",self$City))
print("------------------------------------")
}
),private=list(
upper_ = function(x){
return (toupper(x))
}
))
list_of_customers = list()
for (row in 1:nrow(customers)){
row_read = customers[row,]
customer = Customer$new(row_read$Customer_id,row_read$Name,row_read$City)
list_of_customers[[row]] <- (customer)
}
list_of_customers[[1]]$full_print()
pik=c(0.2,0.7,0.8,0.5,0.4,0.4)
N=length(pik)
n=sum(pik)
y=rnorm(N,10,2)
# Draws a Poisson sample of expected size n
s=UPpoisson(pik)
# Computes the Horvitz-Thompson estimator
install.packages("sampling")
library(sampling)
pik=c(0.2,0.7,0.8,0.5,0.4,0.4)
N=length(pik)
n=sum(pik)
pik
N
n
y=rnorm(N,10,2)
y
s=UPpoisson(pik)
s
s==1
HTestimator(y[s==1],pik[s==1])
pikl=outer(pik,pik,"*")
diag(pikl)=pik
pikl
U <- c("Yves", "Ken", "Erik", "Sharon", "Leslie")
y1<-c(32, 34, 46, 89, 35)
y2<-c(1,1,1,0,0)
N <- length(U)
n <- 2
p <- c(0.13, 0.2, 0.15, 0.1, 0.15, 0.04, 0.02, 0.06, 0.07, 0.08)
# Calculates the theoretical variance of the HT estimator
VarHT(y1, N, n, p)
VarHT(y2, N, n, p)
install.packages(" TeachingSampling")
# Computes the Horvitz-Thompson estimator
HTestimator(y[s==1],pik[s==1])
data(belgianmunicipalities)
attach(belgianmunicipalities)
# Computes the inclusion probabilities
pik=inclusionprobabilities(Tot04,200)
N=length(pik)
n=sum(pik)
# Defines the variable of interest
y=TaxableIncome
# Draws a Poisson sample of expected size 200
s=UPpoisson(pik)
# Computes the Horvitz-Thompson estimator
HTestimator(y,pik)
vals = rnorm(10000,0,1)
vals
hist(vals)
hist(vals,density=TRUE)
plot(density(vals))
abline(v=1)
abline(v=1,col="r")
abline(v=1,col="red")
abline(v=2,col="red")
plot(density(vals))
abline(v=2,col="red")
qnorm(0.9,0,1)
qnorm(0.8,0,1)
qnorm(0.9,0,1)
pnorm(0.9,0,1)
dnorm(0.9,0,1)
pnorm(0.9,0,1)
dnorm(2,0,1)
pnorm(2,0,1)
1-pnorm(2,0,1)
print(paste("Density at x=2",pnorm(2,0,1))
print(paste("Area to the left of x=2",pnorm(2,0,1))
print(paste("Area to the right of x=2",1-pnorm(2,0,1))
print(paste("90th Quantile: x value that has 90% to the left",qnorm(0.9,0,1))
print(paste("Density at x=2",pnorm(2,0,1))
)
print(paste("Area to the left of x=2",pnorm(2,0,1)))
print(paste("Area to the right of x=2",1-pnorm(2,0,1)))
print(paste("90th Quantile: x value that has 90% to the left",qnorm(0.9,0,1)))
print(paste("Area to the left of x=2",pnorm(2,0,1)))
print(paste("Area to the right of x=2",1-pnorm(2,0,1)))
print(paste("90th Quantile: x value that has 90% to the left",qnorm(0.9,0,1)))
print(paste("Area to the left of x=3",pchisq(3,33)))
N <- 1000
xx <- rgamma(N, shape=20,rate=2)
LL <- function(shape, rate) {
R = suppressWarnings(dgamma(xx, shape=shape, rate=rate))
return(-sum(log(R)))
}
P_1000 = mle2(LL, start = list(shape = 1, rate=1))
summary(P_1000)
N <- 10
x <- rgamma(N, shape=20,rate=2)
LL <- function(shape, rate) {
R = suppressWarnings(dgamma(x, shape=shape, rate=rate))
return(-sum(log(R)))
}
P_10 = mle2(LL, start = list(shape = 1, rate=1))
summary(P_10)
confint(P_1000)
confint(P_10)
library(bbmle)
N <- 1000
xx <- rgamma(N, shape=20,rate=2)
LL <- function(shape, rate) {
R = suppressWarnings(dgamma(xx, shape=shape, rate=rate))
return(-sum(log(R)))
}
P_1000 = mle2(LL, start = list(shape = 1, rate=1))
summary(P_1000)
N <- 10
x <- rgamma(N, shape=20,rate=2)
LL <- function(shape, rate) {
R = suppressWarnings(dgamma(x, shape=shape, rate=rate))
return(-sum(log(R)))
}
P_10 = mle2(LL, start = list(shape = 1, rate=1))
summary(P_10)
confint(P_1000)
confint(P_10)
vals = rnorm(10000,0,1)
plot(main = "density",density(vals))
abline(v=2,col="red")
vals = rnorm(10000,0,1)
plot(main = "density",density(vals))
abline(v=2,col="red")
print(paste("Area to the left of x=2",pnorm(2,0,1)))
print(paste("Area to the right of x=2",1-pnorm(2,0,1)))
print(paste("90th Quantile: x value that has 90% to the left",qnorm(0.9,0,1)))
print(paste("Area to the left of x=3",pchisq(3,33)))
vals = rnorm(10000,0,1)
plot(main = "density",density(vals))
abline(v=2,col="red")
print(paste("Area to the left of x=2",pnorm(2,0,1)))
print(paste("Area to the right of x=2",1-pnorm(2,0,1)))
print(paste("90th Quantile: x value that has 90% to the left",qnorm(0.9772,0,1)))
datag = read.csv("/Users/admin/Documents/R_book/chapter1/03/ctgs.csv")
transformed_data  = melt(datag,id.vars = "Company")
ggplot(transformed_data, aes(x = Company, y = value, fill = variable)) + geom_bar(stat = "identity",position=position_dodge())
library(ggplot2)
library(reshape)
datag = read.csv("/Users/admin/Documents/R_book/chapter1/03/ctgs.csv")
transformed_data  = melt(datag,id.vars = "Company")
ggplot(transformed_data, aes(x = Company, y = value, fill = variable)) + geom_bar(stat = "identity",position=position_dodge())
ggplot(transformed_data, aes(x = Company, y = value, fill = variable)) + geom_bar(stat = "identity")
library(ggplot2)
library(tidyr)
rnorm_result  = data.frame(rnorm = rnorm(10000,0,1))
inverse_way   = data.frame(inverse = qnorm(runif(10000),0,1))
total_table   = cbind(rnorm_result,inverse_way)
transp_table  = gather(total_table)
colnames(transp_table) = c("method","value")
ggplot(transp_table, aes(x=value,fill=method)) + geom_density(alpha=0.25)
rpois_result           = data.frame(rpois   = rpois(10000,5))
inverse_way            = data.frame(inverse = qpois(runif(10000),5))
total_table            = cbind(rpois_result,inverse_way)
transp_table           = gather(total_table)
colnames(transp_table) = c("method","value")
ggplot(transp_table, aes(x=value,fill=method)) + geom_histogram(alpha=0.8,binwidth = 1)
install.packages('DiagrammeR')
library('DiagrammeR')
grViz("
digraph dot {
graph [layout = dot]
node [shape = circle,
style = filled,
color = grey,
label = '']
node [fillcolor = white,fixedsize = true, width = 2]
a[label = 'Company A']
node [fillcolor = white]
b[label = 'IT+RD Consulting'] c[label = 'General Consulting'] d[label = 'Other Activities']
node [fillcolor = white]
edge [color = grey]
a -> {b c d}
b -> {e[label = '254';color=blue] f[label = '83%';color=green]}
c -> {k[label = '132';color=blue] l[label = '61%';color=green]}
d -> {q[label = '192';color=blue] r[label = '47%';color=green]}
}")
setwd("/Users/admin/Documents/R_book/chapter1/10")
sourceCpp("./rcpp_example.cpp")
Rfunc <- function(rand__vector,rand_matrix){
mcounter = 0
for (q in 1:length(rand__vector)){
for (x in 1:dim(rand_matrix)[1]){
for (y in 1:dim(rand_matrix)[2]){
v1 = rand_matrix[x,y];
v2 = rand__vector[q];
if ( v1 < v2){
mcounter = mcounter+1
}
}
}
}
return (mcounter)
}
some__matrix = replicate(500, rnorm(20))
some__vector = rnorm(100)
start_time <- Sys.time()
bring_element(some__vector,some__matrix)
end_time <- Sys.time()
print(end_time - start_time)
start_time <- Sys.time()
Rfunc(some__vector,some__matrix)
end_time <- Sys.time()
print(end_time - start_time)
sourceCpp("./rcpp_example.cpp")
library(Rcpp)
sourceCpp("./rcpp_example.cpp")
Rfunc <- function(rand__vector,rand_matrix){
mcounter = 0
for (q in 1:length(rand__vector)){
for (x in 1:dim(rand_matrix)[1]){
for (y in 1:dim(rand_matrix)[2]){
v1 = rand_matrix[x,y];
v2 = rand__vector[q];
if ( v1 < v2){
mcounter = mcounter+1
}
}
}
}
return (mcounter)
}
some__matrix = replicate(500, rnorm(20))
some__vector = rnorm(100)
start_time <- Sys.time()
bring_element(some__vector,some__matrix)
end_time <- Sys.time()
print(end_time - start_time)
start_time <- Sys.time()
Rfunc(some__vector,some__matrix)
end_time <- Sys.time()
print(end_time - start_time)
setwd("/Users/admin/Documents/R_book/chapter1/13")
customers = read.csv("./Customers_data.csv")
Customer = R6Class(public=list(Customer_id = NULL,Name = NULL,City = NULL,
initialize = function(customer_id,name,city,Missing_product,Missing_since){
self$Customer_id  <- customer_id
self$Name         <- name
self$City         <- city
},
is_city_in_america = function(){
return (upper_(self$City) %in% c("NEW YORK","LONDON","MIAMI","BARCELONA"))
},
full_print = function(){
print("------------------------------------")
print(paste("Customer name ->",self$Name))
print(paste("Customer city ->",self$City))
print("------------------------------------")
}
),private=list(
upper_ = function(x){
return (toupper(x))
}
))
list_of_customers = list()
for (row in 1:nrow(customers)){
row_read = customers[row,]
customer = Customer$new(row_read$Customer_id,row_read$Name,row_read$City)
list_of_customers[[row]] <- (customer)
}
list_of_customers[[1]]$full_print()
library(R6)
customers = read.csv("./Customers_data.csv")
Customer = R6Class(public=list(Customer_id = NULL,Name = NULL,City = NULL,
initialize = function(customer_id,name,city,Missing_product,Missing_since){
self$Customer_id  <- customer_id
self$Name         <- name
self$City         <- city
},
is_city_in_america = function(){
return (upper_(self$City) %in% c("NEW YORK","LONDON","MIAMI","BARCELONA"))
},
full_print = function(){
print("------------------------------------")
print(paste("Customer name ->",self$Name))
print(paste("Customer city ->",self$City))
print("------------------------------------")
}
),private=list(
upper_ = function(x){
return (toupper(x))
}
))
list_of_customers = list()
for (row in 1:nrow(customers)){
row_read = customers[row,]
customer = Customer$new(row_read$Customer_id,row_read$Name,row_read$City)
list_of_customers[[row]] <- (customer)
}
list_of_customers[[1]]$full_print()
setwd("/Users/admin/Documents/R_book/chapter1/14")
seqfplot(mvad.seq, with.legend = T, border = NA,group=group__, title = "Sequence frequency plot")
library(TraMineR)
datax       <- read.csv("./data__model.csv",stringsAsFactors = FALSE)
mvad.labels <- c("CLOSED","L1", "L2", "L3")
mvad.scode  <- c("CLD","L1", "L2", "L3")
mvad.seq    <- seqdef(datax, 3:22, states = mvad.scode,labels = mvad.labels)
group__     <- paste0(datax$Sex,"-",datax$Age)
seqfplot(mvad.seq, with.legend = T, border = NA,group=group__, title = "Sequence frequency plot")
library(TraMineR)
datax       <- read.csv("./data__model.csv",stringsAsFactors = FALSE)
mvad.labels <- c("CLOSED","L1", "L2", "L3")
mvad.scode  <- c("CLD","L1", "L2", "L3")
mvad.seq    <- seqdef(datax, 3:22, states = mvad.scode,labels = mvad.labels)
group__     <- paste0(datax$Sex,"-",datax$Age)
seqfplot(mvad.seq, with.legend = T, border = NA,group=group__, main = "Sequence frequency plot")
seqfplot(mvad.seq, with.legend = T, border = NA,group=group__, main = "Sequence frequency plot")
seqdplot(mvad.seq, with.legend = T,group=group__, border = NA, main = "State distribution plot")
dist.om1 <- seqdist(mvad.seq, method = "OM", indel = 1, sm = "TRATE")
library(cluster)
clusterward1 <- agnes(dist.om1, diss = TRUE, method = "ward")
plot(clusterward1, which.plot = 2)
cl1.4 <- cutree(clusterward1, k = 4)
cl1.4fac <- factor(cl1.4, labels = paste("Type", 1:4))
seqrplot(mvad.seq, diss = dist.om1, group = cl1.4fac,border = NA)
seqIplot(mvad.seq, group = cl1.4fac, sortv = "from.start")
seqrplot(mvad.seq, diss = dist.om1, group = cl1.4fac,border = NA)
Turbulence <- seqST(mvad.seq,)
summary(Turbulence)
hist(Turbulence, col = "cyan", main = "Sequence turbulence")
datax$Turbulence = Turbulence
fee = Turbulence
fee[Turbulence>7] = 1
fee[Turbulence<=7] = 0
fee[Turbulence<=3] = 2
seqfplot(mvad.seq, with.legend = T,group=fee, border = NA, title = "Sequence frequency plot")
seqmtplot(mvad.seq)
seqHtplot(mvad.seq,group=group__, title = "Entropy index")
seqHtplot(mvad.seq,group=group__, main = "Entropy index")
cl1.4fac
seqrplot(mvad.seq, diss = dist.om1, group = cl1.4fac,border = NA)
datax
mb4 <- (cl4.lab == "Type 1")
R> glm.cl4 <- glm(mb4 ~ Sex, data = datax)
mb4 <- (cl1.4fac == "Type 1")
R> glm.cl4 <- glm(mb4 ~ Sex, data = datax)
glm.cl4 <- glm(mb4 ~ Sex, data = datax)
glm.cl4
glm.cl4 <- glm(mb4 ~ Sex + Age, data = datax)
sumaary(glm.cl4)
summary(glm.cl4)
