m_norm<-stan(model_code=(ster),data = list(N=4176,K=1,y=Y,X=X),pars = c("beta"))
library(rstan)
ster <- "data {
int N; //the number of observations
int K; //the number of columns in the model matrix
int y[N]; //the response
matrix[N,1] X; //the model matrix
}
parameters {
vector[K] beta; //the regression parameters
}
transformed parameters {
vector[N] linpred;
linpred = X*beta;
}
model {
beta[1] ~ gamma(0.5,10);
y ~ poisson(linpred);
}
"
#load libraries
library(rstan)
library(coda)
set.seed(20151204)
X = as.matrix(data$whole_weight,4176,1)
Y = data$rings
m_norm<-stan(model_code=(ster),data = list(N=4176,K=1,y=Y,X=X),pars = c("beta"))
summary(m_norm)
library(rstan)
ster <- "data {
int N; //the number of observations
int K; //the number of columns in the model matrix
int y[N]; //the response
matrix[N,1] X; //the model matrix
}
parameters {
vector[K] beta; //the regression parameters
}
transformed parameters {
vector[N] linpred;
linpred = X*beta;
}
model {
beta[1] ~ gamma(0.5,10);
y ~ poisson(linpred);
}
generated quantities {
vector[N2] y_pred;
y_pred ~ poisson(beta[1]);
}
"
#load libraries
library(rstan)
library(coda)
set.seed(20151204)
X = as.matrix(data$whole_weight,4176,1)
Y = data$rings
m_norm<-stan(model_code=(ster),data = list(N=4176,K=1,y=Y,X=X),pars = c("beta"))
summary(m_norm)
ster <- "data {
int N; //the number of observations
int K; //the number of columns in the model matrix
int y[N]; //the response
matrix[N,1] X; //the model matrix
}
parameters {
vector[K] beta; //the regression parameters
}
transformed parameters {
vector[N] linpred;
linpred = X*beta;
}
model {
beta[1] ~ gamma(0.5,10);
y ~ poisson(linpred);
}
generated quantities {
vector[100] y_pred;
y_pred ~ poisson(beta[1]);
}
"
library(rstan)
ster <- "data {
int N; //the number of observations
int K; //the number of columns in the model matrix
int y[N]; //the response
matrix[N,1] X; //the model matrix
}
parameters {
vector[K] beta; //the regression parameters
}
transformed parameters {
vector[N] linpred;
linpred = X*beta;
}
model {
beta[1] ~ gamma(0.5,10);
y ~ poisson(linpred);
}
generated quantities {
y_pred ~ poisson(beta[1]);
}
"
#load libraries
library(rstan)
library(coda)
set.seed(20151204)
X = as.matrix(data$whole_weight,4176,1)
Y = data$rings
m_norm<-stan(model_code=(ster),data = list(N=4176,K=1,y=Y,X=X),pars = c("beta"))
summary(m_norm)
library(rstan)
ster <- "data {
int N; //the number of observations
int K; //the number of columns in the model matrix
int y[N]; //the response
matrix[N,1] X; //the model matrix
}
parameters {
vector[K] beta; //the regression parameters
}
transformed parameters {
vector[N] linpred;
linpred = X*beta;
}
model {
beta[1] ~ gamma(0.5,10);
y ~ poisson(linpred);
}
generated quantities {
int y_pred;
y_pred ~ poisson(beta[1]);
}
"
#load libraries
library(rstan)
library(coda)
set.seed(20151204)
X = as.matrix(data$whole_weight,4176,1)
Y = data$rings
m_norm<-stan(model_code=(ster),data = list(N=4176,K=1,y=Y,X=X),pars = c("beta"))
summary(m_norm)
hist(returns)
library('depmixS4')
library("PerformanceAnalytics")
datas           = read.csv("/Users/fjuretig/Downloads/hist_PAM20190304.csv")[5]
returns        = diff(datas$cierre)/datas$cierre[-length(datas$cierre)]
plot(returns,type="l")
returns        = data.frame(returns =returns)
hist(returns)
hist(returns)
hist(returns$returns)
hist(returns$returns,main="Histogram of returns")
help("depmix")
hmmfit <- fit(hmm, verbose = FALSE)
datas           = read.csv("/Users/fjuretig/Downloads/hist_PAM20190304.csv")[5]
returns        = diff(datas$cierre)/datas$cierre[-length(datas$cierre)]
plot(returns,type="l")
returns        = data.frame(returns =returns)
hist(returns$returns,main="Histogram of returns")
hmm <- depmix(returns ~ 1, family = gaussian(), nstates = 2, data=data.frame(returns=returns))
hmmfit <- fit(hmm, verbose = FALSE)
post_probs <- posterior(hmmfit)
layout(1:3)
plot(data$cierre)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Flat-Bear','Bull'), fill=1:3, bty='n')
plot(data$returns)
post_probs <- posterior(hmmfit)
layout(1:3)
plot(data$returns)
layout(1:3)
plot(returns)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Flat-Bear','Bull'), fill=1:3, bty='n')
post_probs <- posterior(hmmfit)
layout(1:3)
plot(returns$returns)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Flat-Bear','Bull'), fill=1:3, bty='n')
post_probs <- posterior(hmmfit)
layout(1:3)
plot(returns$returns,type="l")
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Flat-Bear','Bull'), fill=1:3, bty='n')
plot(datas$cierre,type="l")
plot(returns$returns,type="l")
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Flat-Bear','Bull'), fill=1:3, bty='n')
layout(1:4)
plot(datas$cierre,type="l")
plot(returns$returns,type="l")
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Flat-Bear','Bull'), fill=1:3, bty='n')
r = rpois(200,50)
r
r = data.frame(people = rpois(200,50),state="open")
r
r = data.frame(people = rpois(200,50),state="open",weather="sunny")
r
write.csv(r,"/Users/fjuretig/Downloads/subway_data.csv")
data = read.csv("/Users/fjuretig/Downloads/hist_PAM20190304.csv")
data
data = read.csv("/Users/fjuretig/Downloads/subway_data.csv")
data
hmm    <- depmix(data$people ~ 1 + weather, family = poisson(), nstates = 2, data=data)
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1 + weather_sunny, family = poisson(), nstates = 2, data=data)
hmmfit <- fit(hmm, verbose = FALSE)
hmm    <- depmix(data$people ~ 1 + weather_sunny, family = poisson(), nstates = 2, data=data)
hmmfit <- fit(hmm, verbose = FALSE)
hmmfit
post_probs <- posterior(hmmfit)
post_probs
post_probs <- length(posterior(hmmfit))
post_probs
post_probs <- nrow(posterior(hmmfit))
post_probs
hmmfit <- fit(hmm, verbose = FALSE)
help("fit")
hmm    <- depmix(data$people ~ 1 , family = poisson(), nstates = 2, data=data)
hmmfit <- fit(hmm, verbose = FALSE)
hmmfit <- fit(hmm, verbose = TRUE)
hmmfit
fit(hmm, verbose = TRUE)
hmm    <- depmix(data$people ~ 1 , family = poisson(), nstates = 2, data=data,respstart=c(10,10))
hmmfit <- fit(hmm, verbose = TRUE)
data
layout(1:4)
plot(data$people,type="l")
post_probs <- posterior(hmmfit)
plot(post_probs$state, type='s', main='True Regimes', xlab='', ylab='Regime')
data$state = post_probs$state
View(data)
data = read.csv("/Users/fjuretig/Downloads/subway_data.csv")
data
data = read.csv("/Users/fjuretig/Downloads/subway_data.csv")
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
View(data)
hmm    <- depmix(data$people ~ 1 , family = poisson(), nstates = 2, data=data,respstart=c(10,10))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
data$state_pred
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10))
hmmfit <- fit(hmm, verbose = TRUE)
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10))
hmmfit <- fit(hmm, verbose = TRUE)
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
data$state_pred
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),
trstart = c(0.9,0.1,0.1,0.9))
hmmfit <- fit(hmm, verbose = TRUE)
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
data$state_pred
data$state_pred = post_probs$state
View(data)
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),
trstart = c(0.5,0.5,0.5,0.5))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
data$state_pred
data = read.csv("/Users/fjuretig/Downloads/subway_data.csv")
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),
trstart = c(0.5,0.5,0.5,0.5))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
data
data = read.csv("/Users/fjuretig/Downloads/subway_data.csv")
data
data = read.csv("/Users/fjuretig/Downloads/subway_data.csv")
data
data = read.csv("/Users/fjuretig/Downloads/subway_data.csv")
data
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
data
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data)
hmmfit <- fit(hmm, verbose = TRUE)
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
View(data)
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
View(data)
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
View(data)
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
View(data)
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
View(data)
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
View(data)
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
View(data)
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
View(data)
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data.csv")
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1  + data$weather_sunny, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10))
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
View(data)
plot(data$people,type="l")
layout(1:4)
plot(data$people,type="l")
data$state_pred = post_probs$state
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
layout(1:2)
plot(data$people,type="l")
data$state_pred = post_probs$state
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Flat-Bear','Bull'), fill=1:3, bty='n')
View(data)
post_probs <- posterior(hmmfit)
layout(1:2)
plot(data$people,type="l")
data$state_pred = post_probs$state
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Open','Closed'), fill=1:3, bty='n')
post_probs <- posterior(hmmfit)
layout(1:2)
plot(data$people,type="l")
data$state_pred = post_probs$state
matplot(post_probs[,-1], type='l', main='Regime Posterior Probabilities', ylab='Probability')
legend(x='topright', c('Closed','Open'), fill=1:3, bty='n')
table(data$state,state_pred)
table(data$state,data$state_pred)
help(depmix)
data = read.csv("/Users/fjuretig/Documents/R_book/subway_data_extended.csv")
hmm    <- depmix(data$people ~ 1  + data$weather_sunny,transition ~ 1, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),
transition )
data$weather_sunny = 0
data$weather_sunny[data$weather=="sunny"] = 1
hmm    <- depmix(data$people ~ 1  + data$weather_sunny,transition ~ 1, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),
transition )
hmm    <- depmix(data$people ~ 1  + data$weather_sunny,transition = transInit(~ 1), family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),
transition )
hmmfit <- fit(hmm, verbose = TRUE)
hmm    <- depmix(data$people ~ 1  + data$weather_sunny,transition = transInit(~ 1), family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),
transition )
hmm    <- depmix(data$people ~ 1  + data$weather_sunny,transition = ~ 1, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),transition )
hmm    <- depmix(data$people ~ 1  + data$weather_sunny,transition = ~ data$machinery_road, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),transition )
hmmfit <- fit(hmm, verbose = TRUE)
hmm    <- depmix(data$people ~ 1  + data$weather_sunny,transition = ~ data$machinery_road, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),transition )
hmm    <- depmix(data$people ~ 1  + data$weather_sunny,transition = ~ data$machinery_road, family = poisson(), nstates = 2, data=data,respstart=c(10,10,10,10),transition )
hmm    <- depmix(data = data, people ~ 1  + weather_sunny,transition = ~ machinery_road, family = poisson(), nstates = 2, respstart=c(10,10,10,10),transition )
hmm    <- depmix(data = data, people ~ 1  + weather_sunny,transition =~machinery_road, family = poisson(), nstates = 2, respstart=c(10,10,10,10),transition )
hmm    <- depmix(data = data, people ~ 1  + weather_sunny,transition=~1,  family = poisson(), nstates = 2, respstart=c(10,10,10,10),transition )
hmm    <- depmix(data = data, people ~ 1  + weather_sunny,transition=~1,  family = poisson(), nstates = 2, respstart=c(10,10,10,10) )
hmm    <- depmix(data = data, people ~ 1  + weather_sunny,transition=~1 + machinery_road,  family = poisson(), nstates = 2, respstart=c(10,10,10,10) )
hmmfit <- fit(hmm, verbose = TRUE)
post_probs <- posterior(hmmfit)
data$state_pred = post_probs$state
View(data)
table(data$state,data$state_pred)
install.packages("seqHMM")
library("seqHMM")
install.packages("bnviewer")
library("bnviewer")
data           = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data")
colnames(data) = c("sex","length","diameter","height","whole_weight","shucked_weight","viscera_weight","shell_weight","rings")
data$rings     = log(data$rings)
dag     = model2network("[sex][length|sex][diameter|sex][height|sex][whole_weight|length:diameter:height][shucked_weight|length:diameter:height][viscera_weight|length:diameter:height][shell_weight|length:diameter:height][rings|whole_weight:shucked_weight:viscera_weight:shell_weight]")
parm    = list(nodes = nodes(dag), arcs = arcs(dag),col = "black", textCol = "black")
library("bnlearn")
viewer(dag,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "80vh",
bayesianNetwork.layout = "layout_with_sugiyama",
bayesianNetwork.title="Discrete Bayesian Network - Alarm",
bayesianNetwork.subtitle = "Monitoring of emergency care patients",
bayesianNetwork.footer = "Fig. 1 - Layout with Sugiyama"
)
data           = read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data")
colnames(data) = c("sex","length","diameter","height","whole_weight","shucked_weight","viscera_weight","shell_weight","rings")
data$rings     = log(data$rings)
dag     = model2network("[sex][length|sex][diameter|sex][height|sex][whole_weight|length:diameter:height][shucked_weight|length:diameter:height][viscera_weight|length:diameter:height][shell_weight|length:diameter:height][rings|whole_weight:shucked_weight:viscera_weight:shell_weight]")
parm    = list(nodes = nodes(dag), arcs = arcs(dag),col = "black", textCol = "black")
viewer(dag,
bayesianNetwork.width = "100%",
bayesianNetwork.height = "80vh",
bayesianNetwork.layout = "layout_with_sugiyama",
bayesianNetwork.title="Discrete Bayesian Network - Alarm",
bayesianNetwork.subtitle = "Monitoring of emergency care patients",
bayesianNetwork.footer = "Fig. 1 - Layout with Sugiyama"
)
viewer(dag,
bayesianNetwork.width    = "100%",
bayesianNetwork.height   = "80vh",
bayesianNetwork.layout   = "layout_with_sugiyama",
bayesianNetwork.title    = "Abalone network",
bayesianNetwork.subtitle = "User defined network",
bayesianNetwork.footer   = "Fig. 1 - live diagram"
)
help(viewer)
viewer(dag,
bayesianNetwork.width    = "100%",
bayesianNetwork.height   = "80vh",
bayesianNetwork.layout   = "layout_with_dh",
bayesianNetwork.title    = "Abalone network",
bayesianNetwork.subtitle = "User defined network",
bayesianNetwork.footer   = "Fig. 1 - live diagram"
)
help(viewer)
viewer(dag,
bayesianNetwork.width    = "100%",
bayesianNetwork.height   = "80vh",
bayesianNetwork.layout   = "layout_as_tree",
bayesianNetwork.title    = "Abalone network",
bayesianNetwork.subtitle = "User defined network",
bayesianNetwork.footer   = "Fig. 1 - live diagram"
)
viewer(dag,
bayesianNetwork.width    = "100%",
bayesianNetwork.height   = "80vh",
bayesianNetwork.layout   = "layout_with_sugiyama",
bayesianNetwork.title    = "Abalone network",
bayesianNetwork.subtitle = "User defined network",
bayesianNetwork.footer   = "Fig. 1 - live diagram"
)
library('depmixS4')
datas           = read.csv("/Users/fjuretig/Downloads/hist_PAM20190304.csv")[5]
returns        = diff(datas$cierre)/datas$cierre[-length(datas$cierre)]
plot(returns,type="l")
returns        = data.frame(returns =returns)
hist(returns$returns,main="Histogram of returns")
getwd()
setwd("/Users/fjuretig/Documents/R_book/chapter10")
data = read.csv("./employee_data.csv")[-1]
data    = read.csv("./employee_data.csv")[-1]
data = read.csv("./subway_data.csv")
data = read.csv("./subway_data_extended.csv")
datas           = read.csv("./hist_PAM20190304.csv")[5]
