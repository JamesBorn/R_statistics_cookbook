plot(lm(data=data,metal_strength ~ v1b     +    v3b  +    v4b   +    v1a   +   v2a    +  v3a   +   v4a))
predict(lm(data=data,metal_strength ~ v1b     +    v3b  +    v4b   +    v1a   +   v2a    +  v3a   +   v4a),data)
head(predict(lm(data=data,metal_strength ~ v1b     +    v3b  +    v4b   +    v1a   +   v2a    +  v3a   +   v4a),data))
head(data)
data       <- read.csv("./metals2.csv")
data
data       <- read.csv("./metals2.csv")
plot(lm(data=data,metal_strength ~ v1b     +    v3b  +    v4b   +    v1a   +   v2a    +  v3a   +   v4a))
summary(lm(data=data,metal_strength ~ v1b     +    v3b  +    v4b   +    v1a   +   v2a    +  v3a   +   v4a))
library(MASS)
library(caret)
library(RANN)
set.seed(100)
data       <- read.csv("./metals2.csv")
summary(lm(data=data,metal_strength ~ v1b     +    v3b  +    v4b   +    v1a   +   v2a    +  v3a   +   v4a))
data       <- read.csv("./metals2.csv")
summary(lm(data=data,metal_strength ~ v1b     +    v3b  +    v4b   +    v1a   +   v2a    +  v3a   +   v4a))
summary(lm(data=data,metal_strength ~ v1b     +       v4b   +    v1a   +   v2a    +  v3a   +   v4a))
summary(lm(data=data,metal_strength ~ v1b     +       v4b   +    v1a   +   v2a    +  v4a))
summary(lm(data=data,metal_strength ~ v1b     +       v4b   +    v1a   +   v2a    ))
carbon      = rnorm(1000,100,10)
nitrogren   = rnorm(1000,100,10) + nitrogren
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
carbon      = rnorm(1000,100,10)
nitrogren   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync + datx
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync
lm(datx,carbon + nitrogren + temperature + cobalt + magnesium + zync)
lm(datx,datx ~ carbon + nitrogren + temperature + cobalt + magnesium + zync)
lm(datx,"datx ~ carbon + nitrogren + temperature + cobalt + magnesium + zync")
carbon      = rnorm(1000,100,10)
nitrogren   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync
datx        = data.frame(carbon=carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,
zync=zync)
carbon      = rnorm(1000,100,10)
nitrogren   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync
nitrogen
nitrogren   = rnorm(1000,100,10) + carbon
nitrogren   = rnorm(1000,100,10) + carbon
carbon      = rnorm(1000,100,10)
nitrogren   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync
datx        = data.frame(carbon=carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
nitrogen
carbon      = rnorm(1000,100,10)
nitrogen   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync
datx        = data.frame(metal_s = datx, carbon=carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
lm(datx,datx ~ carbon + nitrogren + temperature + cobalt + magnesium + zync)
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
lm(datx,datx ~ carbon + nitrogren + temperature + cobalt + magnesium + zync)
lm(data = datx,datx ~ carbon + nitrogren + temperature + cobalt + magnesium + zync)
datx
carbon      = rnorm(1000,100,10)
nitrogen   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
datx
lm(data = datx,datx ~ carbon + nitrogren + temperature + cobalt + magnesium + zync)
lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync)
summary(lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync))
carbon      = rnorm(1000,100,10)
nitrogen   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync + rnorm(0,50)
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
summary(lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync))
carbon      = rnorm(1000,100,10)
nitrogen   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync + rnorm(1000,0,50)
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
summary(lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync))
carbon      = rnorm(1000,100,10)
nitrogen   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync + rnorm(1000,0,80)
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
summary(lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync))
carbon      = rnorm(1000,100,10)
nitrogen   = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync + rnorm(1000,0,120)
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
summary(lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync))
write.csv("metals3.csv",datx)
write.csv(datx,"metals3.csv")
data       <- read.csv("./metals3.csv")
data       <- data[-1]
trainIndex <- createDataPartition(data$metal_strength, p = .75, list = FALSE, times = 1)
data
data
data       <- read.csv("./metals3.csv")
data
data       <- data[-1]
trainIndex <- createDataPartition(data$metal_s, p = .75, list = FALSE, times = 1)
traindata  <- data[trainIndex,]
testdata   <- data[-trainIndex,]
preprocess_object   <- preProcess(traindata[-1],method=c("medianImpute","scale","center"))
x_transformed       <- predict(preprocess_object,traindata[-1])
combined_train_data <- cbind(x_transformed,traindata[1])
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.01))
m3       <- train(metal_strength~., data=combined_train_data, method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
m3       <- train(data$metal_s~., data=combined_train_data, method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
m3       <- train(metal_s~., data=combined_train_data, method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$metal_strength)
postResample(pred = y_test_pred, obs = testdata$metal_s)
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.9))
m3       <- train(metal_strength~., data=combined_train_data, method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
m3       <- train(metal_s~., data=combined_train_data, method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
postResample(pred = y_test_pred, obs = testdata$metal_s)
control <-  trainControl(method="repeatedcv", number=4, repeats=1)
tunegrid <- expand.grid(C=c(0.01,0.1,0.2,0.3,0.4,0.5))
m3       <- train(metal_s~., data=combined_train_data, method="svmLinear",preProcess=c("medianImpute","scale","center")
,metric="RMSE", tuneGrid=tunegrid, trControl=control)
summary(m3)
m3
datx
datx$metal_s[c(1,10,20,30,50,60,70,110,120,130,140,150,160,170,180,190,200,14,24,34,44,54,65,67)] = 1900
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
summary(lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync))
write.csv(datx,"metals3.csv")
carbon      = rnorm(1000,100,10)
nitrogen    = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync + rnorm(1000,0,120)
datx$metal_s[c(1,10,20,30,50,60,70,110,120,130,140,150,160,170,180,190,200,14,24,34,44,54,65,67)] = 1900
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
datx[c(1,10,20,30,50,60,70,110,120,130,140,150,160,170,180,190,200,14,24,34,44,54,65,67),1] = 1900
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
summary(lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync))
datx
carbon      = rnorm(1000,100,10)
nitrogen    = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync + rnorm(1000,0,120)
datx[c(1,10,20,30,50,60,70,110,120,130,140,150,160,170,180,190,200,14,24,34,44,54,65,67),1] = 1900
datx[c(1,10,20,30,50,60,70,110,120,130,140,150,160,170,180,190,200,14,24,34,44,54,65,67)] = 1900
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
summary(lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync))
write.csv(datx,"metals3.csv")
data       <- read.csv("./metals3.csv")
data       <- data[-1]
trainIndex <- createDataPartition(data$metal_s, p = .75, list = FALSE, times = 1)
traindata  <- data[trainIndex,]
testdata   <- data[-trainIndex,]
preprocess_object   <- preProcess(traindata[-1],method=c("medianImpute","scale","center"))
x_transformed       <- predict(preprocess_object,traindata[-1])
combined_train_data <- cbind(x_transformed,traindata[1])
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.01))
m3       <- train(metal_s~., data=combined_train_data, method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$metal_s)
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.9))
m3       <- train(metal_s~., data=combined_train_data, method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$metal_s)
control <-  trainControl(method="repeatedcv", number=4, repeats=1)
tunegrid <- expand.grid(C=c(0.01,0.1,0.2,0.3,0.4,0.5))
m3       <- train(metal_s~., data=combined_train_data, method="svmLinear",preProcess=c("medianImpute","scale","center")
,metric="RMSE", tuneGrid=tunegrid, trControl=control)
summary(m3)
m3$results
carbon      = rnorm(1000,100,10)
nitrogen    = rnorm(1000,100,10) + carbon
temperature = rnorm(1000,120,30)
cobalt      = rnorm(1000,1900,300)
magnesium   = rgamma(1000,40,7)
zync        = rgamma(1000,20,3) + magnesium
datx        = carbon + nitrogren + temperature + cobalt + magnesium + zync + rnorm(1000,0,120)
datx        = data.frame(metal_s = datx, carbon= 200 + carbon,nitrogen=nitrogen,temperature=temperature,cobalt=cobalt,magnesium=magnesium,zync=zync)
summary(lm(data = datx,metal_s ~ carbon + nitrogren + temperature + cobalt + magnesium + zync))
write.csv(datx,"metals3.csv")
data       <- read.csv("./metals.csv")
data = data[-1]
trainIndex <- createDataPartition(data$metal_strength, p = .75,
list = FALSE, times = 1)
traindata  <- data[trainIndex,]
testdata   <- data[-trainIndex,]
preprocess_object <-
preProcess(traindata[-1],method=c("medianImpute","scale","center"))
x_transformed <- predict(preprocess_object,traindata[-1])
combined_train_data <- cbind(x_transformed,traindata[1])
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.01))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.9))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear", metric="RMSE", tuneGrid=tunegrid,
trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <-  trainControl(method="repeatedcv", number=4, repeats=1)
tunegrid <- expand.grid(C=c(0.01,0.1,0.2,0.3,0.4,0.5))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",preProcess=c("medianImpute","scale","center")
,metric="RMSE", tuneGrid=tunegrid, trControl=control)
summary(m3)
m3$results
m3$bestTune
library(MASS)
library(caret)
library(RANN)
set.seed(100)
data       <- read.csv("./metals.csv")
data = data[-1]
trainIndex <- createDataPartition(data$metal_strength, p = .75,
list = FALSE, times = 1)
traindata  <- data[trainIndex,]
testdata   <- data[-trainIndex,]
preprocess_object <-
preProcess(traindata[-1],method=c("medianImpute","scale","center"))
x_transformed <- predict(preprocess_object,traindata[-1])
combined_train_data <- cbind(x_transformed,traindata[1])
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.01))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.9))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear", metric="RMSE", tuneGrid=tunegrid,
trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <-  trainControl(method="repeatedcv", number=4, repeats=1)
tunegrid <- expand.grid(C=c(0.01,0.1,0.2,0.3,0.4,0.5))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",preProcess=c("medianImpute","scale","center")
,metric="RMSE", tuneGrid=tunegrid, trControl=control)
m3$results
m3$bestTune
library(MASS)
library(caret)
library(RANN)
set.seed(100)
data       <- read.csv("./metals.csv")
data = data[-1]
trainIndex <- createDataPartition(data$metal_strength, p = .75,
list = FALSE, times = 1)
traindata  <- data[trainIndex,]
testdata   <- data[-trainIndex,]
preprocess_object <-
preProcess(traindata[-1],method=c("medianImpute","scale","center"))
x_transformed <- predict(preprocess_object,traindata[-1])
combined_train_data <- cbind(x_transformed,traindata[1])
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.01))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
library(MASS)
library(caret)
library(RANN)
set.seed(100)
data       <- read.csv("./metals.csv")
data = data[-1]
trainIndex <- createDataPartition(data$metal_strength, p = .75,
list = FALSE, times = 1)
traindata  <- data[trainIndex,]
testdata   <- data[-trainIndex,]
preprocess_object <-
preProcess(traindata[-1],method=c("medianImpute","scale","center"))
x_transformed <- predict(preprocess_object,traindata[-1])
combined_train_data <- cbind(x_transformed,traindata[1])
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.01))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.9))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear", metric="RMSE", tuneGrid=tunegrid,
trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <-  trainControl(method="repeatedcv", number=4, repeats=1)
tunegrid <- expand.grid(C=c(0.01,0.1,0.2,0.3,0.4,0.5))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",preProcess=c("medianImpute","scale","center")
,metric="RMSE", tuneGrid=tunegrid, trControl=control)
m3$results
m3$bestTune
library(MASS)
library(caret)
library(RANN)
set.seed(100)
data       <- read.csv("./metals.csv")
data = data[-1]
trainIndex <- createDataPartition(data$metal_strength, p = .75,
list = FALSE, times = 1)
traindata  <- data[trainIndex,]
testdata   <- data[-trainIndex,]
preprocess_object <-
preProcess(traindata[-1],method=c("medianImpute","scale","center"))
x_transformed <- predict(preprocess_object,traindata[-1])
combined_train_data <- cbind(x_transformed,traindata[1])
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.01))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.9))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear", metric="RMSE", tuneGrid=tunegrid,
trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <-  trainControl(method="repeatedcv", number=4, repeats=1)
tunegrid <- expand.grid(C=c(0.01,0.1,0.2,0.3,0.4,0.5))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",preProcess=c("medianImpute","scale","center")
,metric="RMSE", tuneGrid=tunegrid, trControl=control)
m3$results
m3$bestTune
head(data)
m3
x
library(MASS)
library(caret)
library(RANN)
set.seed(100)
data       <- read.csv("./metals.csv")
data = data[-1]
trainIndex <- createDataPartition(data$metal_strength, p = .75,
list = FALSE, times = 1)
traindata  <- data[trainIndex,]
testdata   <- data[-trainIndex,]
preprocess_object <-
preProcess(traindata[-1],method=c("medianImpute","scale","center"))
x_transformed <- predict(preprocess_object,traindata[-1])
combined_train_data <- cbind(x_transformed,traindata[1])
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.01))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",
metric="RMSE", tuneGrid=tunegrid, trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <- trainControl(method="none")
tunegrid <- expand.grid(C=c(0.9))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear", metric="RMSE", tuneGrid=tunegrid,
trControl=control)
test_xdata  <- predict(preprocess_object,testdata[-1])
y_test_pred <- predict(m3,test_xdata)
postResample(pred = y_test_pred, obs = testdata$m)
control <-  trainControl(method="repeatedcv", number=4, repeats=1)
tunegrid <- expand.grid(C=c(0.01,0.1,0.2,0.3,0.4,0.5))
m3 <- train(metal_strength~., data=combined_train_data,
method="svmLinear",preProcess=c("medianImpute","scale","center")
,metric="RMSE", tuneGrid=tunegrid, trControl=control)
m3$results
m3
getwd()
setwd("/Users/fjuretig/Documents/GitHub/R_statistics_cookbook/chapter05")
data = read.csv("./price__sales.csv")
model_loess1 = loess(data$sales~data$price,  span = 2/3, degree = 2, family = c("gaussian"))
model_loess2 = loess(data$sales~data$price,  span = 0.1, degree = 2, family = c("gaussian"))
loess1_wrapper <- function(x){
return (predict(model_loess1,x))
}
loess2_wrapper <- function(x){
return (predict(model_loess2,x))
}
loess1_wrapper(0.5) - loess1_wrapper(20)
data = read.csv("./price__sales.csv")
model_loess1 = loess(data$sales~data$price,  span = 2/3, degree = 2, family = c("gaussian"))
model_loess2 = loess(data$sales~data$price,  span = 0.1, degree = 2, family = c("gaussian"))
loess1_wrapper <- function(x){
return (predict(model_loess1,x))
}
loess2_wrapper <- function(x){
return (predict(model_loess2,x))
}
loess1_wrapper(0.5)
(predict(model_loess1,2)
)
(predict(model_loess1,222)
model_loess1
data = read.csv("./price__sales.csv")
model_loess1 = loess(data$sales~data$price,  span = 2/3, degree = 2, family = c("gaussian"))
model_loess2 = loess(data$sales~data$price,  span = 0.1, degree = 2, family = c("gaussian"))
model_loess1
loess1_wrapper <- function(x){
return (predict(model_loess1,x))
}
loess2_wrapper <- function(x){
return (predict(model_loess2,x))
}
loess1_wrapper(0.5) - loess1_wrapper(20)
loess1_wrapper <- function(x){
return (predict(model_loess1,x))
}
loess2_wrapper <- function(x){
return (predict(model_loess2,x))
}
model_loess2
model_loess1
predict(model_loess1,3)
predict(model_loess1,0.2)
predict(model_loess1,0.5)
predict(model_loess1,1)
predict(model_loess1,2)
predict(model_loess1,4)
predict(model_loess1,4)
loess1_wrapper(4) - loess1_wrapper(20)
loess1_wrapper(4) - loess1_wrapper(20)
loess1_wrapper(20)  - loess1_wrapper(36)
plot(data$price,data$sales)
curve(loess1_wrapper,add=TRUE,col="red",lwd=3)
curve(loess2_wrapper,add=TRUE,col="blue",lwd=3)
legend(17.7, 0.5, legend=c("span=0.75", "span=0.1"),col=c("red", "blue"), lty=1:1, cex=0.8)
loess1_wrapper(4)   - loess1_wrapper(20)
loess1_wrapper(20)  - loess1_wrapper(36)
plot(data$price,data$sales)
curve(loess1_wrapper,add=TRUE,col="red",lwd=3)
curve(loess2_wrapper,add=TRUE,col="blue",lwd=3)
legend(17.7, 0.5, legend=c("span=0.75", "span=0.1"),col=c("red", "blue"), lty=1:1, cex=0.8)
loess1_wrapper(5)   - loess1_wrapper(10)
loess1_wrapper(10)  - loess1_wrapper(15)
